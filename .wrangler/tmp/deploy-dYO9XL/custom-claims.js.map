{
  "version": 3,
  "sources": ["../../../custom-claims.js"],
  "sourceRoot": "/Users/federicocoppede/Documents/GitHub/cloudflare-worker-webhook/.wrangler/tmp/deploy-dYO9XL",
  "sourcesContent": ["export default {\n  async fetch(req, env) {\n    if (req.method !== \"POST\" || new URL(req.url).pathname !== \"/\") {\n      return new Response(\"Not found\", { status: 404 });\n    }\n\n    if (!env.SIGNING_KEY) {\n      return new Response(\"Missing signing key\", { status: 500 });\n    }\n\n    const signatureHeader = req.headers.get(\"zitadel-signature\");\n    if (!signatureHeader) {\n      console.log(\"Missing Signature\");\n      return new Response(\"Missing signature\", { status: 400 });\n    }\n\n    const rawBody = await req.text();\n\n    const elements = signatureHeader.split(\",\");\n    const timestamp = elements.find(e => e.startsWith(\"t=\"))?.split(\"=\")[1];\n    const signature = elements.find(e => e.startsWith(\"v1=\"))?.split(\"=\")[1];\n\n    if (!timestamp || !signature) {\n      console.log(\"Malformed signature header\");\n      return new Response(\"Malformed signature header\", { status: 400 });\n    }\n\n    const signedPayload = `${timestamp}.${rawBody}`;\n    const encoder = new TextEncoder();\n\n    const key = await crypto.subtle.importKey(\n      \"raw\",\n      encoder.encode(env.SIGNING_KEY),\n      { name: \"HMAC\", hash: \"SHA-256\" },\n      false,\n      [\"sign\"]\n    );\n\n    const sigBuffer = await crypto.subtle.sign(\"HMAC\", key, encoder.encode(signedPayload));\n\n    const hmac = Array.from(new Uint8Array(sigBuffer))\n      .map(b => b.toString(16).padStart(2, \"0\"))\n      .join(\"\");\n\n    if (hmac !== signature) {\n      console.log(\"Invalid Signature\");\n      console.log(\"Signature received: \", signatureHeader);\n      console.log(\"Signing key: \", env.SIGNING_KEY);\n      console.log(\"Computed signature: \", hmac);\n      return new Response(\"Invalid signature\", { status: 400 });\n    }\n\n    const jsonBody = JSON.parse(rawBody);\n\n    console.log('Received body:');\n    console.log(JSON.stringify(jsonBody));\n\n    const response = {\n      \"append_claims\": [\n        {\n          \"key\": \"group\",\n          \"value\": \"ADMIN\"\n        }\n      ]\n    };\n\n\n    return new Response(JSON.stringify(response), {\n      status: 200,\n      headers: { \"Content-Type\": \"application/json\" }\n    });\n  }\n};\n"],
  "mappings": ";AAAA,IAAO,wBAAQ;AAAA,EACb,MAAM,MAAM,KAAK,KAAK;AACpB,QAAI,IAAI,WAAW,UAAU,IAAI,IAAI,IAAI,GAAG,EAAE,aAAa,KAAK;AAC9D,aAAO,IAAI,SAAS,aAAa,EAAE,QAAQ,IAAI,CAAC;AAAA,IAClD;AAEA,QAAI,CAAC,IAAI,aAAa;AACpB,aAAO,IAAI,SAAS,uBAAuB,EAAE,QAAQ,IAAI,CAAC;AAAA,IAC5D;AAEA,UAAM,kBAAkB,IAAI,QAAQ,IAAI,mBAAmB;AAC3D,QAAI,CAAC,iBAAiB;AACpB,cAAQ,IAAI,mBAAmB;AAC/B,aAAO,IAAI,SAAS,qBAAqB,EAAE,QAAQ,IAAI,CAAC;AAAA,IAC1D;AAEA,UAAM,UAAU,MAAM,IAAI,KAAK;AAE/B,UAAM,WAAW,gBAAgB,MAAM,GAAG;AAC1C,UAAM,YAAY,SAAS,KAAK,OAAK,EAAE,WAAW,IAAI,CAAC,GAAG,MAAM,GAAG,EAAE,CAAC;AACtE,UAAM,YAAY,SAAS,KAAK,OAAK,EAAE,WAAW,KAAK,CAAC,GAAG,MAAM,GAAG,EAAE,CAAC;AAEvE,QAAI,CAAC,aAAa,CAAC,WAAW;AAC5B,cAAQ,IAAI,4BAA4B;AACxC,aAAO,IAAI,SAAS,8BAA8B,EAAE,QAAQ,IAAI,CAAC;AAAA,IACnE;AAEA,UAAM,gBAAgB,GAAG,SAAS,IAAI,OAAO;AAC7C,UAAM,UAAU,IAAI,YAAY;AAEhC,UAAM,MAAM,MAAM,OAAO,OAAO;AAAA,MAC9B;AAAA,MACA,QAAQ,OAAO,IAAI,WAAW;AAAA,MAC9B,EAAE,MAAM,QAAQ,MAAM,UAAU;AAAA,MAChC;AAAA,MACA,CAAC,MAAM;AAAA,IACT;AAEA,UAAM,YAAY,MAAM,OAAO,OAAO,KAAK,QAAQ,KAAK,QAAQ,OAAO,aAAa,CAAC;AAErF,UAAM,OAAO,MAAM,KAAK,IAAI,WAAW,SAAS,CAAC,EAC9C,IAAI,OAAK,EAAE,SAAS,EAAE,EAAE,SAAS,GAAG,GAAG,CAAC,EACxC,KAAK,EAAE;AAEV,QAAI,SAAS,WAAW;AACtB,cAAQ,IAAI,mBAAmB;AAC/B,cAAQ,IAAI,wBAAwB,eAAe;AACnD,cAAQ,IAAI,iBAAiB,IAAI,WAAW;AAC5C,cAAQ,IAAI,wBAAwB,IAAI;AACxC,aAAO,IAAI,SAAS,qBAAqB,EAAE,QAAQ,IAAI,CAAC;AAAA,IAC1D;AAEA,UAAM,WAAW,KAAK,MAAM,OAAO;AAEnC,YAAQ,IAAI,gBAAgB;AAC5B,YAAQ,IAAI,KAAK,UAAU,QAAQ,CAAC;AAEpC,UAAM,WAAW;AAAA,MACf,iBAAiB;AAAA,QACf;AAAA,UACE,OAAO;AAAA,UACP,SAAS;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAGA,WAAO,IAAI,SAAS,KAAK,UAAU,QAAQ,GAAG;AAAA,MAC5C,QAAQ;AAAA,MACR,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,IAChD,CAAC;AAAA,EACH;AACF;",
  "names": []
}
